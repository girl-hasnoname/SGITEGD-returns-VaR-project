# -*- coding: utf-8 -*-
"""SGITEGD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k-90uAjaeJ-QInkqwg9iZlbGyikBu5kd

Importer les donn√©es du cours de SGI European Green Deal (SGITEGD) du 01/01/23 au 01/03/23 depuis Yahoo Finance
"""

import numpy as np
import pandas as pd
import yfinance as yf
from scipy.stats import norm

# read the excel file and retrieve the tickers from the respective column
df = pd.read_excel('EU_FullComposition_SGITEGD_2023_Q1.xlsx', sheet_name='SGITEGD', header=0)

# find the column name containing the tickers
tickers_col_name = df.columns[df.isin(['Yahoo Finance Ticker']).any()][0]

# retrieve the tickers from the column
tickers = df[tickers_col_name].astype(str).tolist()

# retrieve the stock data from Yahoo Finance
start_date = '2023-01-01'
end_date = '2023-03-01'
all_data = pd.DataFrame(columns=['date', 'ticker', 'Close', 'daily_return', 'weighted_return' , 'VaR' , 'weighted_VaR']) # create an empty DataFrame to store the data

# loop over each ticker
for i, ticker in enumerate(tickers):
    try:
        # get data on this ticker
        tickerData = yf.Ticker(ticker)

        # get the historical prices for this ticker
        tickerDf = tickerData.history(period='1d', start=start_date, end=end_date)

        # calculate the daily returns
        daily_return = tickerDf['Close'].pct_change()
        tickerDf['daily_return'] = daily_return

        # calculate weighted daily returns
        weighted_return = daily_return * 0.019231 # multiply return by the weight for this ticker
        tickerDf['weighted_return'] = weighted_return

        # reset index and change column name to 'Date'
        tickerDf = tickerDf.reset_index()
        tickerDf = tickerDf.rename(columns={'Date': 'date'})

        # format the date column to YYYY-MM-DD
        tickerDf['date'] = pd.to_datetime(tickerDf['date']).dt.strftime('%Y-%m-%d')

        # calculate VaR for this ticker
        returns = tickerDf['daily_return']
        VaR = norm.ppf(0.05, returns.mean(), returns.std()) * returns.sum()

        # add VaR column
        tickerDf['VaR'] = VaR

        # add weighted VaR column
        weighted_VaR = VaR * 0.019231 # multiply VaR by the weight for this ticker
        tickerDf['weighted_VaR'] = weighted_VaR

         # add ticker column
        tickerDf['ticker'] = ticker

        # append the data to the all_data DataFrame
        all_data = all_data.append(tickerDf[['date', 'ticker', 'Close', 'daily_return', 'weighted_return', 'VaR', 'weighted_VaR']], ignore_index=True)
    except:
        print(f"Failed to download data for ticker: {ticker}")

# calculate VaR for the portfolio
portfolio_VaR = all_data['VaR'].sum() * 100 # VaR in percentage

# calculate weighted VaR for the portfolio
portfolio_weighted_VaR = all_data['weighted_VaR'].sum() * 100 # VaR in percentage

# calculate total return, weighted return, VaR and weighted VaR for the portfolio
total_return = all_data['daily_return'].sum() * 100 # return in percentage
weighted_return = all_data['weighted_return'].sum() * 100 # return in percentage

#calculate portfolio total return and weighted total return
portfolio_total_return = (all_data['Close'].iloc[-1] - all_data['Close'].iloc[0]) / all_data['Close'].iloc[0]
portfolio_weighted_total_return = (all_data['weighted_return'] + 1).prod() - 1

#calculate portfolio total VaR and weighted total VaR
portfolio_total_VaR = all_data['VaR'].sum()
portfolio_weighted_total_VaR = all_data['weighted_VaR'].sum()

#add portfolio statistics to the all_data DataFrame
portfolio_statistics = pd.DataFrame({
'date': '',
'ticker': 'Portfolio',
'Close': all_data['Close'].iloc[-1],
'daily_return': '',
'weighted_return': '',
'VaR': portfolio_total_VaR,
'weighted_VaR': portfolio_weighted_total_VaR
}, index=[0])
all_data = all_data.append(portfolio_statistics, ignore_index=True)

#add portfolio total return and weighted total return to the all_data DataFrame
all_data.loc[all_data.index[-1], 'daily_return'] = portfolio_total_return * 100
all_data.loc[all_data.index[-1], 'weighted_return'] = portfolio_weighted_total_return * 100

#format the file name
file_name = 'SGITEGD_returns_from_2023-01-01_to_2023-03-01.xlsx'

#export the data to Excel
writer = pd.ExcelWriter(file_name)
all_data.to_excel(writer, index=False)
writer.save()